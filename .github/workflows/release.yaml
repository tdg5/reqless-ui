name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        default: '1.2.3'
        description: 'Release version'
        required: true
      previousVersion:
        default: '1.2.2'
        description: 'Previous release version (used for release notes)'
        required: true

jobs:
  test-and-build-and-publish-and-release:
    env:
      VERSION: ${{ github.event.inputs.version }}
    name: Test, build, publish, and release the package
    permissions:
      contents: 'write'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_GITHUB_ACTIONS }}

      - name: Run super linter
        uses: github/super-linter@v5
        env:
          DEFAULT_BRANCH: main
          FILTER_REGEX_EXCLUDE: .github/.*
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN || secrets.PAT_GITHUB_ACTIONS }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}

      - name: Docker build and push
        uses: docker/build-push-action@v5
        with:
          build-args: |
            REQLESS_UI_GIT_REF=${{ github.sha }}
            REQLESS_UI_VERSION=${{ github.event.inputs.version }}
          cache-from: mode=max,type=gha
          cache-to: type=gha
          context: .
          platforms: |
            linux/amd64
            linux/arm64
          push: true
          tags: |
            tdg5/reqless-ui:${{ github.event.inputs.version }}
            tdg5/reqless-ui:${{ github.sha }}
            tdg5/reqless-ui:latest

      - name: Configure git actor
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN || secrets.PAT_GITHUB_ACTIONS }}
          PREVIOUS_RELEASE_NAME: v${{ github.event.inputs.previousVersion }}
          RELEASE_NAME: v${{ github.event.inputs.version }}
        name: Create and push tag for published version
        run: |
          git tag -m "$RELEASE_NAME" "$RELEASE_NAME"
          git push origin "$RELEASE_NAME"

          gh release create \
            --generate-notes \
            --notes-start-tag "$PREVIOUS_RELEASE_NAME" \
            --target "$GITHUB_REF" \
            --title "$RELEASE_NAME" \
            --verify-tag \
            "$RELEASE_NAME"
